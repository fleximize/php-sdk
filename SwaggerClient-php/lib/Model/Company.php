<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fleximize Applications API
 *
 * Welcome to the Fleximize API!    If you encouter any problems or have any questions and inquiries, please contact the development team. Thank you.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: development@fleximize.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @description Object holding company data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Company implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vat_no' => 'string',
'monthly_sales' => 'double',
'date_of_creation' => '\DateTime',
'trading_date' => '\DateTime',
'same_address' => 'bool',
'registered_address' => '\Swagger\Client\Model\Address',
'trading_address' => '\Swagger\Client\Model\Address',
'directors' => '\Swagger\Client\Model\Person[]',
'shareholders' => '\Swagger\Client\Model\Person[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vat_no' => null,
'monthly_sales' => 'double',
'date_of_creation' => 'date',
'trading_date' => 'date',
'same_address' => null,
'registered_address' => null,
'trading_address' => null,
'directors' => null,
'shareholders' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_no' => 'vat_no',
'monthly_sales' => 'monthly_sales',
'date_of_creation' => 'date_of_creation',
'trading_date' => 'trading_date',
'same_address' => 'same_address',
'registered_address' => 'registered_address',
'trading_address' => 'trading_address',
'directors' => 'directors',
'shareholders' => 'shareholders'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_no' => 'setVatNo',
'monthly_sales' => 'setMonthlySales',
'date_of_creation' => 'setDateOfCreation',
'trading_date' => 'setTradingDate',
'same_address' => 'setSameAddress',
'registered_address' => 'setRegisteredAddress',
'trading_address' => 'setTradingAddress',
'directors' => 'setDirectors',
'shareholders' => 'setShareholders'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_no' => 'getVatNo',
'monthly_sales' => 'getMonthlySales',
'date_of_creation' => 'getDateOfCreation',
'trading_date' => 'getTradingDate',
'same_address' => 'getSameAddress',
'registered_address' => 'getRegisteredAddress',
'trading_address' => 'getTradingAddress',
'directors' => 'getDirectors',
'shareholders' => 'getShareholders'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat_no'] = isset($data['vat_no']) ? $data['vat_no'] : null;
        $this->container['monthly_sales'] = isset($data['monthly_sales']) ? $data['monthly_sales'] : null;
        $this->container['date_of_creation'] = isset($data['date_of_creation']) ? $data['date_of_creation'] : null;
        $this->container['trading_date'] = isset($data['trading_date']) ? $data['trading_date'] : null;
        $this->container['same_address'] = isset($data['same_address']) ? $data['same_address'] : null;
        $this->container['registered_address'] = isset($data['registered_address']) ? $data['registered_address'] : null;
        $this->container['trading_address'] = isset($data['trading_address']) ? $data['trading_address'] : null;
        $this->container['directors'] = isset($data['directors']) ? $data['directors'] : null;
        $this->container['shareholders'] = isset($data['shareholders']) ? $data['shareholders'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['monthly_sales'] === null) {
            $invalidProperties[] = "'monthly_sales' can't be null";
        }
        if ($this->container['trading_date'] === null) {
            $invalidProperties[] = "'trading_date' can't be null";
        }
        if ($this->container['same_address'] === null) {
            $invalidProperties[] = "'same_address' can't be null";
        }
        if ($this->container['registered_address'] === null) {
            $invalidProperties[] = "'registered_address' can't be null";
        }
        if ($this->container['directors'] === null) {
            $invalidProperties[] = "'directors' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_no
     *
     * @return string
     */
    public function getVatNo()
    {
        return $this->container['vat_no'];
    }

    /**
     * Sets vat_no
     *
     * @param string $vat_no Company Vat Number
     *
     * @return $this
     */
    public function setVatNo($vat_no)
    {
        $this->container['vat_no'] = $vat_no;

        return $this;
    }

    /**
     * Gets monthly_sales
     *
     * @return double
     */
    public function getMonthlySales()
    {
        return $this->container['monthly_sales'];
    }

    /**
     * Sets monthly_sales
     *
     * @param double $monthly_sales Company monthly sales value
     *
     * @return $this
     */
    public function setMonthlySales($monthly_sales)
    {
        $this->container['monthly_sales'] = $monthly_sales;

        return $this;
    }

    /**
     * Gets date_of_creation
     *
     * @return \DateTime
     */
    public function getDateOfCreation()
    {
        return $this->container['date_of_creation'];
    }

    /**
     * Sets date_of_creation
     *
     * @param \DateTime $date_of_creation Company incorporation date. Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setDateOfCreation($date_of_creation)
    {
        $this->container['date_of_creation'] = $date_of_creation;

        return $this;
    }

    /**
     * Gets trading_date
     *
     * @return \DateTime
     */
    public function getTradingDate()
    {
        return $this->container['trading_date'];
    }

    /**
     * Sets trading_date
     *
     * @param \DateTime $trading_date When company have started to trade
     *
     * @return $this
     */
    public function setTradingDate($trading_date)
    {
        $this->container['trading_date'] = $trading_date;

        return $this;
    }

    /**
     * Gets same_address
     *
     * @return bool
     */
    public function getSameAddress()
    {
        return $this->container['same_address'];
    }

    /**
     * Sets same_address
     *
     * @param bool $same_address If is set to true, trading address is not required
     *
     * @return $this
     */
    public function setSameAddress($same_address)
    {
        $this->container['same_address'] = $same_address;

        return $this;
    }

    /**
     * Gets registered_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getRegisteredAddress()
    {
        return $this->container['registered_address'];
    }

    /**
     * Sets registered_address
     *
     * @param \Swagger\Client\Model\Address $registered_address registered_address
     *
     * @return $this
     */
    public function setRegisteredAddress($registered_address)
    {
        $this->container['registered_address'] = $registered_address;

        return $this;
    }

    /**
     * Gets trading_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getTradingAddress()
    {
        return $this->container['trading_address'];
    }

    /**
     * Sets trading_address
     *
     * @param \Swagger\Client\Model\Address $trading_address trading_address
     *
     * @return $this
     */
    public function setTradingAddress($trading_address)
    {
        $this->container['trading_address'] = $trading_address;

        return $this;
    }

    /**
     * Gets directors
     *
     * @return \Swagger\Client\Model\Person[]
     */
    public function getDirectors()
    {
        return $this->container['directors'];
    }

    /**
     * Sets directors
     *
     * @param \Swagger\Client\Model\Person[] $directors directors
     *
     * @return $this
     */
    public function setDirectors($directors)
    {
        $this->container['directors'] = $directors;

        return $this;
    }

    /**
     * Gets shareholders
     *
     * @return \Swagger\Client\Model\Person[]
     */
    public function getShareholders()
    {
        return $this->container['shareholders'];
    }

    /**
     * Sets shareholders
     *
     * @param \Swagger\Client\Model\Person[] $shareholders shareholders
     *
     * @return $this
     */
    public function setShareholders($shareholders)
    {
        $this->container['shareholders'] = $shareholders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
